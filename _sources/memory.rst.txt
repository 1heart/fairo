Memory
======

The memory system serves as the interface for passing information between the various components of the agent.  It consists of a database, currently implemented in SQL, with an overlayed triplestore, and MemoryNodes, which are Python wrappers for coherent data.  FILTERS objects connect the AgentMemory and MemoryNodes to the controller.

Database
========

The entry point to the underlying SQL database is an `AgentMemory </../../blob/master/base_agent/sql_memory.py>`_ object.
The database can be directly accessed by the _db_read() method and some common queries using triples or that are otherwise unwieldy in raw SQL have been packaged in the basic_search interface.

.. autoclass:: base_agent.sql_memory.AgentMemory
    :members:     basic_search, get_mem_by_id, forget, _db_read, _db_write, get_time, get_world_time, get_recent_entities, add_triple, tag, untag, get_memids_by_tag, get_tags_by_memids, get_triples, remove_memid_triple, task_stack_push, task_stack_update_task, task_stack_peek, task_stack_pop, task_stack_pause, task_stack_clear, task_stack_resume, task_stack_find_lowest_instance, task_stack_get_all, get_last_finished_root_task, get_task_by_id


MemoryNodes
===========

MemoryNodes are python objects that collate data about a particular entity or event.  There are MemoryNodes for ReferenceObjects (things that have a location in space), for Tasks, for chats and commands, etc.  MemoryObjects can be retrieved with the get_mem_by_id(memid) method.
